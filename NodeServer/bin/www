#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app")
const debug = require("debug")("aedtracking:server")
const https = require("https")

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000")
app.set("port", port)

/**
 * Create HTTP server.
 */

const server = https.createServer(app)

/* Create Socket.io Intance */
const io = require("socket.io").listen(server)
var connections = []

io.on("connection", (socket) => {
  connections.push(socket)
  console.log(
    'User "%s" connected! \nServer connected to %s users.',
    socket.id,
    connections.length
  )
  socket.on("disconnect", function () {
    connections.splice(connections.indexOf(socket), 1)
    socket.disconnect()
    console.log("A User disconnected! %s sockets remaining", connections.length)
    
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log("Magic is happening on port", 3000)
})
server.on("error", onError)
server.on("listening", onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges")
      process.exit(1)
      break
    case "EADDRINUSE":
      console.error(bind + " is already in use")
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port
  debug("Listening on " + bind)
}
